{
  "version": 3,
  "sources": ["../ts/common.ts", "../ts/test-settings.ts"],
  "sourcesContent": ["type TcsTyperUser = {\n    username: string;\n}\n\nexport type TcsTyperSettings = {\n    theme: string,\n    sound: string\n}\n\nexport type UserDetails = {\n    coach: boolean,\n    created_at: string,\n    id: number,\n    full_name: string,\n    password: string,\n    tests: Array<object>,\n    username: string\n}\n\nexport async function fetchUserDetails(username: string): Promise<UserDetails> {\n    console.log(username)\n    let response: UserDetails\n    try {\n        response = await fetch(\"https://tcs-typer.netlify.app/api/user?username=\" + username).then((resp) => resp.json());\n    } catch (e) {\n        throw new Error(\"An error occurred while fetching the user details: \" + e)\n    }\n\n\n    return response\n}\n\nexport function getUser() {\n    try {\n        const storedUser = localStorage.getItem(\"TcsTyper_SavedUser\")\n\n        if (storedUser) {\n            return JSON.parse(localStorage.getItem(\"TcsTyper_SavedUser\") || \"\");\n        } else {\n            // OLD Storage fix:\n            const oldStoredUser = localStorage.getItem(\"username\")\n            if (oldStoredUser) {\n                const newUser = { username: oldStoredUser }\n                setUser(newUser)\n                window.localStorage.removeItem(\"username\")\n                return newUser\n            } else {\n                return null\n            }\n        }\n    } catch {\n        return null\n    }\n}\n\nexport function setUser(newUser: TcsTyperUser): void {\n    localStorage.setItem(\"TcsTyper_SavedUser\", JSON.stringify(newUser));\n}\n\nexport function getSettings(): TcsTyperSettings {\n    const storedSettings = localStorage.getItem(\"TcsTyper_SavedSettings\")\n\n    useSavedSettings: if (storedSettings) {\n        let returning\n        try {\n            returning = JSON.parse(storedSettings);\n        } catch {\n            break useSavedSettings\n        }\n        if (!returning) {\n            break useSavedSettings\n        }\n        if (returning.sound === \"standard-click\") {\n            returning.sound = \"default-click\"\n        }\n        setSettings(returning)\n        return returning\n    }\n\n    const defaultSettings = { theme: \"default-theme\", sound: \"default-click\" }\n\n\n    // OLD Storage fix:\n    const oldStoredTheme = localStorage.getItem(\"theme\")\n    let oldStoredSound = localStorage.getItem(\"sound\")\n    if (oldStoredTheme || oldStoredSound) {\n        let newSettings = defaultSettings\n        if (oldStoredTheme) {\n            newSettings = { ...newSettings, theme: oldStoredTheme }\n            window.localStorage.removeItem(\"theme\")\n        }\n        if (oldStoredSound) {\n            oldStoredSound = oldStoredSound === \"standard-click\" ? \"default-click\" : oldStoredSound\n            newSettings = { ...newSettings, sound: oldStoredSound }\n            window.localStorage.removeItem(\"sound\")\n        }\n        setSettings(newSettings)\n        return newSettings\n    } else {\n        setSettings(defaultSettings)\n        return defaultSettings\n    }\n}\n\nexport function setSettings(newTheme: TcsTyperSettings): void {\n    localStorage.setItem(\"TcsTyper_SavedSettings\", JSON.stringify(newTheme));\n}\n", "import { getSettings, setSettings, TcsTyperSettings } from \"./common\";\n\nconst colorThemes = { \"default-theme\": \"Light Theme\", \"dark-theme\": \"Dark Theme\", \"lavendar-theme\": \"Lavendar Theme\", \"forest-theme\": \"Forest Theme\", \"matrix-theme\": \"Matrix Theme\", \"pink-theme\": \"Pink Theme\", \"discord-theme\": \"Discord Theme\", \"blueberry-theme\": \"Blueberry Theme\", \"cartoon-theme\": \"Cartoon Theme\" };\nconst soundThemes = { \"default-click\": \"Standard Click\", \"mechanical-click\": \"Mechanical Click\", \"pop-click\": \"Pop Click\", \"clacky-click\": \"Clacky Click\", \"cap-click\": \"Cap Click\" };\n\nfunction changeTheme(theme: string) {\n  const body = document.querySelector(\"body\");\n  if (body) {\n    // Remove all other color themes from body's class list\n    body.classList.remove(...Object.keys(colorThemes).filter((t) => t !== theme));\n    // Add the new theme class to body\n    body.classList.add(theme);\n    setSettings({ ...getSettings(), theme: theme })\n  }\n}\n\nfunction changeClick(sound: string) {\n  const body = document.querySelector(\"body\");\n  if (body) {\n    body.classList.remove(...Object.keys(soundThemes).filter((t) => t !== sound));\n    body.classList.add(sound);\n    setSettings({ ...getSettings(), sound: sound })\n  }\n}\n\n\nwindow.addEventListener(\"DOMContentLoaded\", function () {\n  const body: HTMLBodyElement | null = document.querySelector(\"body\");\n\n  //   --------------------------------  SAVED SETTINGS LOAD --------------------------------\n  const currentSettings: TcsTyperSettings = getSettings();\n\n  body?.classList.add(currentSettings.theme);\n  body?.classList.add(currentSettings.sound);\n\n  if (!document.querySelector(\"body#settings\")) return\n\n  //   --------------------------------  THEME BUTTONS --------------------------------\n  const themeButtonsSection = document.getElementById(\"theme-buttons\") as HTMLDivElement\n  if (themeButtonsSection) {\n    for (const [theme, themeName] of Object.entries(colorThemes)) {\n      const themeButton = document.createElement(\"button\") as HTMLButtonElement;\n      themeButton.textContent = themeName\n      themeButton.id = theme\n      themeButtonsSection.appendChild(themeButton)\n      themeButton?.addEventListener(\"click\", function () {\n        changeTheme(theme);\n      });\n    }\n  }\n\n  //   --------------------------------  SOUND BUTTONS --------------------------------\n  const soundButtonsSection = document.getElementById(\"sound-buttons\") as HTMLDivElement\n  if (soundButtonsSection) {\n    for (const [sound, soundName] of Object.entries(soundThemes)) {\n      const soundButton = document.createElement(\"button\") as HTMLButtonElement;\n      soundButton.textContent = soundName\n      soundButton.id = sound\n      soundButtonsSection.appendChild(soundButton)\n      soundButton?.addEventListener(\"click\", function () {\n        changeClick(sound);\n        const audio = new Audio(`/assets/sounds/${sound}.wav`);\n        audio.volume = 0.8;\n        audio.play();\n      });\n    }\n  }\n});\n"],
  "mappings": "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",
  "names": ["getSettings", "storedSettings", "useSavedSettings", "returning", "e", "setSettings", "defaultSettings", "oldStoredTheme", "oldStoredSound", "newSettings", "__spreadProps", "__spreadValues", "newTheme", "colorThemes", "soundThemes", "changeTheme", "theme", "body", "t", "setSettings", "__spreadProps", "__spreadValues", "getSettings", "changeClick", "sound", "currentSettings", "themeButtonsSection", "themeName", "themeButton", "soundButtonsSection", "soundName", "soundButton", "audio"]
}
