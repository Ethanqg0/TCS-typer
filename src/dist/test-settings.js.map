{
  "version": 3,
  "sources": ["../ts/common.ts", "../ts/test-settings.ts"],
  "sourcesContent": ["type TcsTyperUser = {\r\n    username: string;\r\n}\r\n\r\nexport type TcsTyperSettings = {\r\n    theme: string,\r\n    sound: string\r\n}\r\n\r\nexport type UserDetails = {\r\n    coach: boolean,\r\n    created_at: string,\r\n    id: number,\r\n    full_name: string,\r\n    password: string,\r\n    tests: Array<object>,\r\n    username: string\r\n}\r\n\r\nexport async function fetchUserDetails(username: string): Promise<UserDetails> {\r\n    let response: UserDetails\r\n    try {\r\n        response = await fetch(\"https://tcs-typer.netlify.app/api/user?username=\" + username).then((resp) => resp.json());\r\n    } catch (e) {\r\n        throw new Error(\"An error occurred while fetching the user details: \" + e)\r\n    }\r\n\r\n\r\n    return response\r\n}\r\n\r\nexport function getUser() {\r\n    try {\r\n        const storedUser = localStorage.getItem(\"TcsTyper_SavedUser\")\r\n\r\n        if (storedUser) {\r\n            return JSON.parse(localStorage.getItem(\"TcsTyper_SavedUser\") || \"\");\r\n        } else {\r\n            // OLD Storage fix:\r\n            const oldStoredUser = localStorage.getItem(\"username\")\r\n            if (oldStoredUser) {\r\n                const newUser = { username: oldStoredUser }\r\n                setUser(newUser)\r\n                window.localStorage.removeItem(\"username\")\r\n                return newUser\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n    } catch {\r\n        return null\r\n    }\r\n}\r\n\r\nexport function setUser(newUser: TcsTyperUser): void {\r\n    localStorage.setItem(\"TcsTyper_SavedUser\", JSON.stringify(newUser));\r\n}\r\n\r\nexport function getSettings(): TcsTyperSettings {\r\n    const storedSettings = localStorage.getItem(\"TcsTyper_SavedSettings\")\r\n\r\n    useSavedSettings: if (storedSettings) {\r\n        let returning\r\n        try {\r\n            returning = JSON.parse(storedSettings);\r\n        } catch {\r\n            break useSavedSettings\r\n        }\r\n        if (!returning) {\r\n            break useSavedSettings\r\n        }\r\n        if (returning.sound === \"standard-click\") {\r\n            returning.sound = \"default-click\"\r\n        }\r\n        setSettings(returning)\r\n        return returning\r\n    }\r\n\r\n    const defaultSettings = { theme: \"default-theme\", sound: \"default-click\" }\r\n\r\n\r\n    // OLD Storage fix:\r\n    const oldStoredTheme = localStorage.getItem(\"theme\")\r\n    let oldStoredSound = localStorage.getItem(\"sound\")\r\n    if (oldStoredTheme || oldStoredSound) {\r\n        let newSettings = defaultSettings\r\n        if (oldStoredTheme) {\r\n            newSettings = { ...newSettings, theme: oldStoredTheme }\r\n            window.localStorage.removeItem(\"theme\")\r\n        }\r\n        if (oldStoredSound) {\r\n            oldStoredSound = oldStoredSound === \"standard-click\" ? \"default-click\" : oldStoredSound\r\n            newSettings = { ...newSettings, sound: oldStoredSound }\r\n            window.localStorage.removeItem(\"sound\")\r\n        }\r\n        setSettings(newSettings)\r\n        return newSettings\r\n    } else {\r\n        setSettings(defaultSettings)\r\n        return defaultSettings\r\n    }\r\n}\r\n\r\nexport function setSettings(newTheme: TcsTyperSettings): void {\r\n    localStorage.setItem(\"TcsTyper_SavedSettings\", JSON.stringify(newTheme));\r\n}\r\n", "import { getSettings, setSettings, TcsTyperSettings } from \"./common\";\r\n\r\nconst colorThemes = { \"default-theme\": \"Light Theme\", \"dark-theme\": \"Dark Theme\", \"lavendar-theme\": \"Lavendar Theme\", \"forest-theme\": \"Forest Theme\", \"matrix-theme\": \"Matrix Theme\", \"pink-theme\": \"Pink Theme\", \"discord-theme\": \"Discord Theme\", \"blueberry-theme\": \"Blueberry Theme\", \"cartoon-theme\": \"Cartoon Theme\" };\r\nconst soundThemes = { \"default-click\": \"Standard Click\", \"mechanical-click\": \"Mechanical Click\", \"pop-click\": \"Pop Click\", \"clacky-click\": \"Clacky Click\", \"cap-click\": \"Cap Click\" };\r\n\r\nfunction changeTheme(theme: string) {\r\n  const body = document.querySelector(\"body\");\r\n  if (body) {\r\n    // Remove all other color themes from body's class list\r\n    body.classList.remove(...Object.keys(colorThemes).filter((t) => t !== theme));\r\n    // Add the new theme class to body\r\n    body.classList.add(theme);\r\n    setSettings({ ...getSettings(), theme: theme })\r\n  }\r\n}\r\n\r\nfunction changeClick(sound: string) {\r\n  const body = document.querySelector(\"body\");\r\n  if (body) {\r\n    body.classList.remove(...Object.keys(soundThemes).filter((t) => t !== sound));\r\n    body.classList.add(sound);\r\n    setSettings({ ...getSettings(), sound: sound })\r\n  }\r\n}\r\n\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", function () {\r\n  const body: HTMLBodyElement | null = document.querySelector(\"body\");\r\n\r\n  //   --------------------------------  SAVED SETTINGS LOAD --------------------------------\r\n  const currentSettings: TcsTyperSettings = getSettings();\r\n\r\n  body?.classList.add(currentSettings.theme);\r\n  body?.classList.add(currentSettings.sound);\r\n\r\n  if (!document.querySelector(\"body#settings\")) return\r\n\r\n  //   --------------------------------  THEME BUTTONS --------------------------------\r\n  const themeButtonsSection = document.getElementById(\"theme-buttons\") as HTMLDivElement\r\n  if (themeButtonsSection) {\r\n    for (const [theme, themeName] of Object.entries(colorThemes)) {\r\n      const themeButton = document.createElement(\"button\") as HTMLButtonElement;\r\n      themeButton.textContent = themeName\r\n      themeButton.id = theme\r\n      themeButtonsSection.appendChild(themeButton)\r\n      themeButton?.addEventListener(\"click\", function () {\r\n        changeTheme(theme);\r\n      });\r\n    }\r\n  }\r\n\r\n  //   --------------------------------  SOUND BUTTONS --------------------------------\r\n  const soundButtonsSection = document.getElementById(\"sound-buttons\") as HTMLDivElement\r\n  if (soundButtonsSection) {\r\n    for (const [sound, soundName] of Object.entries(soundThemes)) {\r\n      const soundButton = document.createElement(\"button\") as HTMLButtonElement;\r\n      soundButton.textContent = soundName\r\n      soundButton.id = sound\r\n      soundButtonsSection.appendChild(soundButton)\r\n      soundButton?.addEventListener(\"click\", function () {\r\n        changeClick(sound);\r\n        const audio = new Audio(`/assets/sounds/${sound}.wav`);\r\n        audio.volume = 0.8;\r\n        audio.play();\r\n      });\r\n    }\r\n  }\r\n});\r\n"],
  "mappings": "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",
  "names": ["getSettings", "storedSettings", "useSavedSettings", "returning", "e", "setSettings", "defaultSettings", "oldStoredTheme", "oldStoredSound", "newSettings", "__spreadProps", "__spreadValues", "newTheme", "colorThemes", "soundThemes", "changeTheme", "theme", "body", "t", "setSettings", "__spreadProps", "__spreadValues", "getSettings", "changeClick", "sound", "currentSettings", "themeButtonsSection", "themeName", "themeButton", "soundButtonsSection", "soundName", "soundButton", "audio"]
}
